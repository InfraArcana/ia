# Makefile for Infra Arcana

# optimized build
# RELEASE = 1

# build for macosx w/ sdl frameworks
# TARGETOS = macosx

# clang (default)
# C = cc
# CXX = c++

# gcc
# CC = gcc
# CXX = g++

# Directories
SRC_DIR = ./src
OBJ_DIR = ./obj
DEBUG_INC_DIR = $(SRC_DIR)/debugModeIncl
RELEASE_INC_DIR = $(SRC_DIR)/releaseModeIncl
INSTALL_DIR = ./target
ASSETS_DIR = ./assets
OSX_DIR = ./osx

# Output and sources
TARGET = ia
SOURCES = $(wildcard $(SRC_DIR)/*.cpp)
OBJECTS = $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SOURCES))

# check for sdl-config in PATH
ifndef FRAMEWORK
  HAVE_SDLCONFIG := $(shell sdl-config --prefix 2>/dev/null 1>&2; echo $$?)
  ifneq ($(HAVE_SDLCONFIG),0)
    $(error sdl-config not in PATH) 
  endif
endif

# Flags
CPPFLAGS = $(shell sdl-config --cflags)
WARNINGS = -Wall -Wextra
OPTFLAGS = -O0 -g
LDFLAGS = $(shell sdl-config --libs) -lSDL -lSDL_image
INCLUDES := -I$(DEBUG_INC_DIR)

# optimized build
ifdef RELEASE
  OPTFLAGS = -Os
  INCLUDES = -I$(RELEASE_INC_DIR)
endif

# supress clang warnings
ifeq ($(CC),cc)
  WARNINGS += -Wno-mismatched-tags
endif

# OSX
ifeq ($(TARGETOS),macosx)
  OSX_MIN = 10.6
  # ARCH = -arch i386 -arch x86_64
  DEFINES = -DMACOSX
  ifdef FRAMEWORK
    DEFINES += -DOSX_SDL_FW
    INCLUDES += -F/Library/Frameworks \
		-F$(HOME)/Library/Frameworks \
		-I/Library/Frameworks/SDL.framework/Headers \
		-I$(HOME)/Library/Frameworks/SDL.framework/Headers \
		-I/Library/Frameworks/SDL_image.framework/Headers \
		-I$(HOME)/Library/Frameworks/SDL_image.framework/Headers
    CPPFLAGS = $(ARCH) -mmacosx-version-min=$(OSX_MIN)
    LDFLAGS = -F/Library/Frameworks \
	      -F$(HOME)/Library/Frameworks \
	      -framework SDL -framework SDL_image -framework Cocoa $(ARCH)
  else
    DEFINES += -DOSX_SDL_LIBS
    # headers could be in .../include/ or .../include/SDL/ (macports)
    CPPFLAGS += -I$(shell dirname $(shell sdl-config --cflags | sed 's/-I\(.[^ ]*\) .*/\1/')) \
		$(ARCH) -mmacosx-version-min=$(OSX_MIN)
  endif
  OBJECTS += $(OBJ_DIR)/SDLMain.o
endif

CPPFLAGS += $(WARNINGS) $(OPTFLAGS) $(INCLUDES)

all: $(OBJ_DIR)/$(TARGET)

$(OBJ_DIR)/$(TARGET): $(OBJ_DIR) $(OBJECTS)
	$(CXX) -o $@ $(DEFINES) $(OBJECTS) $(LDFLAGS)
	@echo cleaning $(INSTALL_DIR)
	@rm -rf $(INSTALL_DIR)
	@mkdir -p $(INSTALL_DIR)
	@echo copying $(ASSETS_DIR)
	@cp -R $(ASSETS_DIR)/ $(INSTALL_DIR)/
	@echo copying $(TARGET) into $(INSTALL_DIR)
	@cp $(OBJ_DIR)/$(TARGET) $(INSTALL_DIR)
	@echo \`cd $(INSTALL_DIR)\; .\/$(TARGET)\` to run $(TARGET)

$(OBJ_DIR):
	@echo making directory $(OBJ_DIR)
	mkdir -p $(OBJ_DIR)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(CXX) $(DEFINES) $(CPPFLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: $(OSX_DIR)/%.m
	$(CC) $(DEFINES) $(CPPFLAGS) -c $< -o $@

clean:
	@echo removing $(OBJ_DIR)
	rm -rf $(OBJ_DIR)
	@echo removing $(TARGET)
	rm -f $(TARGET)

uninstall:
	@echo removing $(INSTALL_DIR)
	@rm -rf $(INSTALL_DIR)

.PHONY: all clean uninstall
